{"version":3,"sources":["OccurrenceComponent.tsx","App.tsx","serviceWorker.tsx","index.tsx"],"names":["OccurrenceComponent","props","handleInputStringChange","event","preventDefault","input","target","value","setState","inputString","handleBannedWordsChange","bannedWords","findHighestOccurrence","inputArray","bannedWordsArry","console","log","outputArray","reduce","acc","cur","ind","arr","indexOf","count","currentValue","find","e","sort","a","b","filter","map","output","join","state","this","replace","toLowerCase","split","className","onSubmit","placeholder","onChange","id","type","defaultValue","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+OAwGeA,E,kDAxFX,WAAYC,GAAY,IAAD,8BACnB,cAAMA,IASVC,wBAA0B,SAACC,GACvBA,EAAMC,iBACN,IAAIC,EAASF,EAAMG,OAA+BC,MAClD,EAAKC,SAAS,CAACC,YAAYJ,KAbR,EAiBvBK,wBAA0B,SAACP,GACvBA,EAAMC,iBACN,IAAIC,EAASF,EAAMG,OAA+BC,MAClD,EAAKC,SAAS,CAACG,YAAYN,KApBR,EAyBtBO,sBAAwB,SAACT,EAAwCU,EAA0BC,GACtFC,QAAQC,IAAI,aACdb,EAAMC,iBACN,IAAIa,EAAcJ,EAAWK,QAAO,SAASC,EAAoBC,EAAYC,EAAYC,GAEjF,GAAIA,EAAIC,QAAQH,KAASC,EACrB,MAAM,GAAN,mBAAWF,GAAX,CAAgB,CAACZ,MAAMa,EAAKI,MAAO,KAKnC,IAAIC,EAAeN,EAAIO,MAAK,SAAAC,GAAC,OAAIA,EAAEpB,QAAUa,KAK7C,MAJ0B,qBAAhBK,IAENN,EAAIA,EAAII,QAAQE,IAAiB,CAAClB,MAAMa,EAAKI,MAAOL,EAAIA,EAAII,QAAQE,IAAeD,MAAQ,IAExFL,IAEZ,IAEFS,MAAK,SAACC,EAAGC,GAAJ,OAAUA,EAAEN,MAAQK,EAAEL,SAE3BO,QAAO,SAACX,GAAD,OAAiD,IAAxCN,EAAgBS,QAAQH,EAAIb,UAE5CwB,QAAO,SAACX,EAAKC,EAAKC,GAAX,OAAmBF,EAAII,QAAUF,EAAI,GAAGE,SAC/CQ,KAAI,SAAAZ,GAAG,OAAIA,EAAIb,SAEhB,EAAKC,SAAS,CAACyB,OAAQhB,EAAYiB,KAAK,SAlD5C,EAAKC,MAAQ,CACT1B,YAAa,GACbE,YAAa,GACbsB,OAAQ,IALO,E,qDA0Db,IAAD,OAMDpB,EAFcuB,KAAKD,MAAM1B,YAAY4B,QAF3B,sCAE0C,IAE3BC,cAAcC,MAAM,KAC7CzB,EAAiBsB,KAAKD,MAAMxB,YAAY2B,cAAcC,MAAM,UAEjE,OACC,yBAAKC,UAAU,qBACX,0BAAMC,SAAU,SAACd,GAAD,OAAK,EAAKf,sBAAsBe,EAAEd,EAAWC,KACzD,yBAAK0B,UAAU,cACX,8BAAWA,UAAU,gCAA+BjC,MAAO6B,KAAKD,MAAM1B,YAAaiC,YAAY,eAAeC,SAAU,SAAChB,GAAD,OAAK,EAAKzB,wBAAwByB,OAE9J,yBAAKa,UAAU,cACX,8BAAWA,UAAU,2BAA2BI,GAAG,WAAWF,YAAY,eAAeC,SAAU,SAAChB,GAAD,OAAK,EAAKjB,wBAAwBiB,OAEzI,yBAAKa,UAAU,cACX,4BAAQK,KAAK,SAASL,UAAU,gCAAhC,WAEJ,yBAAKA,UAAU,cACb,8BAAWA,UAAU,2BAA2BM,aAAcV,KAAKD,MAAMF,OAAQW,GAAG,WAAWF,YAAY,kB,GAlF3FK,IAAMC,W,MCGzBC,MAZf,WAEE,OACE,yBAAKT,UAAU,OACb,yBAAKA,UAAU,WACb,8DAEF,kBAAC,EAAD,QCAcU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.6bb0ed97.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\n/** Object type to store word with count*/\r\ntype customString = {\r\n    value:string, \r\n    count: number\r\n};\r\n\r\ninterface IState {\r\n    inputString :string,\r\n    bannedWords :string,\r\n    output :string\r\n  }\r\n\r\nclass OccurrenceComponent extends React.Component<{},IState,customString> {\r\n\r\n    constructor(props:any) {\r\n        super(props);\r\n        this.state = {\r\n            inputString :\"\",\r\n            bannedWords :\"\",\r\n            output :\"\"\r\n        };\r\n      }\r\n\r\n      /**Funtion to handle change in input string */\r\n    handleInputStringChange = (event: React.FormEvent<HTMLTextAreaElement>) =>{\r\n        event.preventDefault();\r\n        var input = (event.target as HTMLTextAreaElement).value;\r\n        this.setState({inputString:input});\r\n    }\r\n\r\n    /**Funtion to handle change in banned words */\r\n    handleBannedWordsChange = (event: React.FormEvent<HTMLTextAreaElement>) =>{\r\n        event.preventDefault();\r\n        var input = (event.target as HTMLTextAreaElement).value;\r\n        this.setState({bannedWords:input});\r\n    }\r\n\r\n\r\n    /** Function to find words with highest occerrences */\r\n     findHighestOccurrence = (event:React.FormEvent<HTMLFormElement>, inputArray:Array<string>, bannedWordsArry:Array<string>) => {\r\n          console.log(\"Inside...\")\r\n        event.preventDefault();\r\n        var outputArray = inputArray.reduce(function(acc:customString[], cur:string, ind:number, arr:string[]):customString[] {\r\n                /** To check first occerence of word */\r\n                if (arr.indexOf(cur) === ind) {\r\n                    return [...acc, {value:cur, count: 1}];\r\n                } \r\n                /** If word is olready present in accumlator array  */\r\n                else {\r\n                    //Find current word in accumulator array\r\n                    var currentValue = acc.find(e => e.value === cur);\r\n                    if(typeof currentValue!== 'undefined'){\r\n                        //Increment count of current word\r\n                        acc[acc.indexOf(currentValue)] = {value:cur, count: acc[acc.indexOf(currentValue)].count + 1};\r\n                    }              \r\n                    return acc;\r\n                }\r\n            }, [])\r\n            /** Sort array in desending order */\r\n            .sort((a, b) => b.count - a.count)\r\n            /** To check if array contains banned words */\r\n            .filter((cur) => bannedWordsArry.indexOf(cur.value) === -1)\r\n            /** To filter words with highest occurence */\r\n            .filter((cur, ind, arr) => cur.count === arr[0].count)\r\n            .map(cur => cur.value);        \r\n                \r\n            this.setState({output: outputArray.join(\", \")});\r\n        \r\n        };\r\n\r\n    \r\n    \r\n    render() {\r\n\r\n        const regex = /[!\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~]/g;\r\n        /** regex to remove punctuations */\r\n        let inputString = this.state.inputString.replace(regex, '');\r\n\r\n        let inputArray = inputString.toLowerCase().split(\" \");\r\n        let bannedWordsArry =this.state.bannedWords.toLowerCase().split(/[\\s,]+/);\r\n\r\n       return (\r\n        <div className=\"registration-form\">\r\n            <form onSubmit={(e)=>this.findHighestOccurrence(e,inputArray,bannedWordsArry)}>\r\n                <div className=\"form-group\">\r\n                    <textarea  className=\"form-control item inputString\"value={this.state.inputString} placeholder=\"Input String\" onChange={(e)=>this.handleInputStringChange(e)}/>\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <textarea  className=\"form-control item banned\" id=\"password\" placeholder=\"Banned Words\" onChange={(e)=>this.handleBannedWordsChange(e)}/>\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <button type=\"submit\" className=\"btn btn-block create-account\" >Submit</button>\r\n                </div>\r\n                <div className=\"form-group\">\r\n                  <textarea  className=\"form-control item output\" defaultValue={this.state.output} id=\"password\" placeholder=\"Output\"/>\r\n                </div>\r\n            </form>\r\n        </div>\r\n      );\r\n    };  \r\n};\r\n\r\nexport default OccurrenceComponent;\r\n","import React from 'react';\nimport './App.css';\nimport OccurrenceComponent from './OccurrenceComponent';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <div className=\"heading\">\n        <h2>Welcome To Test Application !</h2>\n      </div>\n      <OccurrenceComponent/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}